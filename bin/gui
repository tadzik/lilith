#!/usr/bin/env perl
use 5.010;
use strict;
use warnings;
use lib 'lib';
use local::lib 'extlib';
use Gtk2 '-init';
use Try::Tiny;
use MIDI;
use Lilith;
use File::Temp 'tmpnam';
use IPC::Open3;
use Cwd;
use utf8;

my $LILYPOND_HELP_URL = 'http://lilypond.org/doc/v2.18/Documentation/learning-big-page.html';

my $win = Gtk2::Window->new('toplevel');
$win->signal_connect(delete_event => sub { Gtk2->main_quit });
$win->show_all;

my $file_entry;
my $tempo_entry;
my $resolution_entry;
my $editor;
my $cli_frame;
my $cli_log;
my $statusbar;
my $current_image;
my $preview;
my $hand_division;

sub generate_preview {
    my $tmpfile = tmpnam;
    my ($wtr, $rdr, $err);
    my $pid = open3($wtr, $rdr, $err, "lilypond --png -s -o $tmpfile -");
    my $buf = $editor->get_buffer;
    $statusbar->push(0, 'Generating preview');
    print $wtr $Lilith::LILYPOND_VERSION, "\n";
    print $wtr $buf->get_text($buf->get_start_iter, $buf->get_end_iter, 1);
    close $wtr;
    waitpid($pid, 0);
    my $output = '';
    if (defined $rdr) {
        while (<$rdr>) {
            $output .= $_
        }
        close $rdr;
    }
    if (defined $err) {
        while (<$err>) {
            $output .= $_
        }
        close $err;
    }
    if ($output) {
        $cli_log->get_buffer->set_text($output);
        $cli_frame->set_expanded(1);
        $statusbar->push(0, 'Something went wrong!');
    } else {
        $cli_log->get_buffer->set_text('');
        $cli_frame->set_expanded(0);

        $current_image->set_from_file("$tmpfile.png");

        $statusbar->push(0, 'Preview generated successfully');
    }
}

sub load_midi {
    my $filename = shift // $file_entry->get_text() // return;
    $file_entry->set_text($filename);

    try {
        $cli_log->get_buffer->set_text('');
        $cli_frame->set_expanded(0);
        my $o = MIDI::Opus->new({ from_file => $filename });
        my $track = ($o->tracks)[0];
        my ($lilypond, $meta) = Lilith::generate({ get_opts() }, $track->events);
        $editor->get_buffer->set_text($lilypond);
        $tempo_entry->set_text($meta->{tempo});
        $resolution_entry->set_text($meta->{resolution});
        my %method_to_index = (simple => 1, tracing => 2);
        $hand_division->set_active($method_to_index{$meta->{hand_division}});
        $statusbar->push(0, "$filename opened");
        generate_preview;
    } catch {
        $cli_log->get_buffer->set_text("Failed to generate lilypond from $filename:\n\t$_");
        $cli_frame->set_expanded(1);
        $statusbar->push(0, 'Something went wrong!');
    }
}

sub get_opts {
    my @hand_div = ('auto', 'simple', 'tracing');
    my $tempo = $tempo_entry->get_text;
    $tempo = undef if ($tempo eq '');
    my $resolution = $resolution_entry->get_text;
    $resolution = undef if ($resolution eq '');
    return (
        omit_version => 1,
        hand_division => $hand_div[$hand_division->get_active],
        tempo => $tempo,
        resolution => $resolution,
    );
}

my $vbox = Gtk2::VBox->new;
{
    my $menu = Gtk2::MenuBar->new;
    {
        my $file_item = Gtk2::MenuItem->new("File");
        my $file_menu = Gtk2::Menu->new;
        $file_item->set_submenu($file_menu);
        my $save_lily = Gtk2::MenuItem->new("Save lilypond");
        $save_lily->signal_connect(activate => sub {
            my $dialog = Gtk2::FileChooserDialog->new(
                'Save lilypond', $win, 'save', 'gtk-cancel' => 'cancel', 'gtk-ok' => 'ok');
            $dialog->set_current_folder(getcwd);

            if ('ok' eq $dialog->run) {
                my $filename = $dialog->get_filename;
                open(my $fh, '>', $filename);
                print $fh $Lilith::LILYPOND_VERSION, "\n";
                my $buf = $editor->get_buffer;
                my $text = $buf->get_text($buf->get_start_iter, $buf->get_end_iter, 1);
                print $fh $text;
                close($fh);
            }
            $dialog->destroy;
        });
        my $save_pdf  = Gtk2::MenuItem->new("Export to PDF");
        $save_pdf->signal_connect(activate => sub {
            my $dialog = Gtk2::FileChooserDialog->new(
                'Export to PDF', $win, 'save', 'gtk-cancel' => 'cancel', 'gtk-ok' => 'ok');
            $dialog->set_current_folder(getcwd);

            if ('ok' eq $dialog->run) {
                my $filename = $dialog->get_filename;
                $filename =~ s/\.pdf$//; # lilypond is stupid and adds .pdf on its own
                open(my $fh, '|-', "lilypond --pdf -s -o $filename -");
                print $fh $Lilith::LILYPOND_VERSION, "\n";
                my $buf = $editor->get_buffer;
                my $text = $buf->get_text($buf->get_start_iter, $buf->get_end_iter, 1);
                print $fh $text;
                close($fh);
            }
            $dialog->destroy;
        });
        $file_menu->append($save_lily);
        $file_menu->append($save_pdf);
        $menu->append($file_item);

        my $help_item = Gtk2::MenuItem->new("Help");
        my $help_menu = Gtk2::Menu->new;
        $help_item->set_submenu($help_menu);
        my $lily_help = Gtk2::MenuItem->new("Lilypond help");
        $lily_help->signal_connect(activate => sub {
            my $browser = $ENV{BROWSER};
            if ($browser) {
                exec("$browser $LILYPOND_HELP_URL") unless fork;
            } else {
                my $dialog = Gtk2::MessageDialog->new(
                    $win, 'destroy-with-parent', 'info', 'ok',
                    "Unable to detect a suitable web browser\n"
                    ."Please navigate to $LILYPOND_HELP_URL manually"
                );
                $dialog->run;
                $dialog->destroy;
            }
        });
        my $about = Gtk2::MenuItem->new("About Lilith");
        $about->signal_connect(activate => sub {
            my $dialog = Gtk2::MessageDialog->new(
                $win, 'destroy-with-parent', 'info', 'ok',
                "Lilith, a music sheet generator\n"
                ."Copyright Tadeusz SoÅ›nierz 2014"
            );
            $dialog->run;
            $dialog->destroy;
        });
        $help_menu->append($lily_help);
        $help_menu->append($about);
        $menu->append($help_item);
    }
    $vbox->pack_start($menu, 0, 0, 0);

    my $hbox = Gtk2::HBox->new;
    $file_entry = Gtk2::Entry->new;
    $file_entry->set_editable(0);

    my $open_button = Gtk2::Button->new_from_stock('gtk-open');
    $open_button->signal_connect(clicked => sub {
        my $dialog = Gtk2::FileChooserDialog->new(
            'Pick a MIDI file', $win, 'open', 'gtk-cancel' => 'cancel', 'gtk-ok' => 'ok');
        $dialog->set_current_folder(getcwd);

        if ('ok' eq $dialog->run) {
            my $filename = $dialog->get_filename;
            load_midi($filename);
        }
        $dialog->destroy;
    });
    my $record_button = Gtk2::Button->new_from_stock('gtk-media-record');
    $record_button->signal_connect(clicked => sub {
        my %buttons;
        my @devices = `arecordmidi -l`;
        shift @devices;
        my @responses;
        for (@devices) {
            $_ =~ s/^\s*//;
            my @parts = split (/\s\s+/, $_);
            my $key = sprintf "%s (%s)", $parts[1], $parts[0];
            push @responses, $parts[0];
            $buttons{$key} = $#responses;
        }
        my $dialog = Gtk2::Dialog->new_with_buttons(
            "Pick a MIDI device", $win, [qw/modal destroy-with-parent/], %buttons
        );
        my $resp = $dialog->run();
        my $port = $responses[$resp];
        $dialog->destroy;
        my $tmpfile = tmpnam() . ".mid";
        my $pid = fork();
        if (!$pid) {
            exec("arecordmidi -p $port $tmpfile");
        }
        $dialog = Gtk2::Dialog->new_with_buttons(
            "Recording...", $win, [qw/modal destroy-with-parent/], 'Stop recording', 0
        );
        $dialog->run();
        $dialog->destroy();
        kill 'TERM', $pid;
        load_midi($tmpfile);
    });
    $hbox->add($file_entry);
    $hbox->pack_start($open_button, 0, 0, 0);
    $hbox->pack_start($record_button, 0, 0, 0);

    $vbox->pack_start($hbox, 0, 0, 0);
}
{
    my $hbox = Gtk2::HBox->new;
    my $label = Gtk2::Label->new("Tempo:");
    $tempo_entry = Gtk2::Entry->new;
    $tempo_entry->signal_connect(activate => sub {
        if ($tempo_entry->get_text() =~ m{\d+/\d+}) {
            load_midi()
        } else {
            my $dialog = Gtk2::MessageDialog->new(
                $win, 'destroy-with-parent', 'error', 'ok',
                "Tempo does not appear to be in a correct format"
            );
            $dialog->run;
            $dialog->destroy;
        }
    });
    $hbox->pack_start($label, 0, 0, 0);
    $hbox->pack_start($tempo_entry, 0, 0, 0);

    $hbox->pack_start(Gtk2::HSeparator->new, 0, 0, 0);

    $label = Gtk2::Label->new("Hand division method:");
    $hand_division = Gtk2::ComboBox->new_text;
    $hand_division->append_text("Automatic");
    $hand_division->append_text("Simple");
    $hand_division->append_text("Tracing");
    $hand_division->set_active(0);
    $hand_division->signal_connect(changed => sub { load_midi() });
    $hbox->pack_start($label, 0, 0, 0);
    $hbox->pack_start($hand_division, 0, 0, 0);

    $label = Gtk2::Label->new("Resolution:");
    $resolution_entry = Gtk2::Entry->new;
    $resolution_entry->signal_connect(activate => sub {
        if ($resolution_entry->get_text() =~ m{\d+}) {
            load_midi()
        } else {
            my $dialog = Gtk2::MessageDialog->new(
                $win, 'destroy-with-parent', 'error', 'ok',
                "Resolution does not appear to be in a correct format"
            );
            $dialog->run;
            $dialog->destroy;
        }
    });
    $hbox->pack_start($label, 0, 0, 0);
    $hbox->pack_start($resolution_entry, 0, 0, 0);

    $vbox->pack_start($hbox, 0, 0, 0);
}
{
    my $inner_vbox = Gtk2::VBox->new;
    my $hpaned = Gtk2::HPaned->new;
    my $editor_frame = Gtk2::Frame->new('Lilypond editor');

    my $editor_box = Gtk2::VBox->new;
    {
        my $button = Gtk2::Button->new;
        my $align = Gtk2::Alignment->new(0.5, 0, 0, 0);
        my $hbox = Gtk2::HBox->new;
        $hbox->pack_start(Gtk2::Label->new('Generate music sheet'), 0, 0, 0);
        $hbox->pack_start(Gtk2::Image->new_from_stock('gtk-apply', 'menu'), 0, 0, 0);
        $align->add($hbox);
        $button->add($align);
        $button->signal_connect(clicked => sub { generate_preview });

        $editor_box->pack_start($button, 0, 0, 0);
    }
    $editor = Gtk2::TextView->new;
    $editor_box->pack_start($editor, 1, 1, 0);

    my $snr_frame = Gtk2::Frame->new('Search & Replace');
    my $snr_box = Gtk2::HBox->new;
    $snr_box->add(Gtk2::Label->new("Pattern:"));
    my $pat = Gtk2::Entry->new;
    $snr_box->add($pat);
    $snr_box->add(Gtk2::Label->new("Replacement:"));
    my $rep =  Gtk2::Entry->new;
    $snr_box->add($rep);
    my $but = Gtk2::Button->new_from_stock('gtk-apply');
    $but->signal_connect(clicked => sub {
        my $pattern = $pat->get_text;
        my $replacement = $rep->get_text;
        my $buf = $editor->get_buffer;
        my $text = $buf->get_text($buf->get_start_iter, $buf->get_end_iter, 1);
        $text =~ s/$pattern/eval $replacement/ge;
        $buf->set_text($text);
    });
    $snr_box->add($but);
    $snr_frame->add($snr_box);
    $editor_box->pack_start($snr_frame, 0, 0, 0);
    $editor_frame->add($editor_box);

    $hpaned->add1($editor_frame);
    my $image_frame = Gtk2::Frame->new('Here be preview');
    my $preview = Gtk2::ScrolledWindow->new;
    $image_frame->add($preview);
    $current_image = Gtk2::Image->new;
    $preview->add_with_viewport($current_image);
    $hpaned->add2($image_frame);
    $inner_vbox->pack_start($hpaned, 1, 1, 0);

    $cli_frame = Gtk2::Expander->new('CLI output');
    $cli_log = Gtk2::TextView->new;
    $cli_log->set_editable(0);
    $cli_frame->add($cli_log);
    $inner_vbox->pack_start($cli_frame, 0, 0, 0);

    $vbox->add($inner_vbox);

    $win->signal_connect('size-allocate' => sub {
        state $last_max = 0;
        # we need this check, because setting pane position also emits size-allocate, and
        # we only want to react when the window actually gets resized
        if ($last_max != $hpaned->get_property('max-position')) {
            $last_max = $hpaned->get_property('max-position');
            $hpaned->set_position($last_max / 2);
        }
    });
}

$statusbar = Gtk2::Statusbar->new;
$statusbar->push(0, 'Welcome to Lilith GUI');
$vbox->pack_start($statusbar, 0, 0, 0);
$win->add($vbox);

$win->show_all;

Gtk2->main;

